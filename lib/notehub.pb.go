// Copyright 2017 Blues Inc.  All rights reserved.
// Use of this source code is governed by licenses granted by the
// copyright holder including that found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: notehub.proto

// Package notelib notehub.proto are the protocol definitions for notebox-notehub comms

package notelib

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotehubPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                        *int64  `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	MessageType                    *string `protobuf:"bytes,2,opt,name=MessageType" json:"MessageType,omitempty"`
	Error                          *string `protobuf:"bytes,3,opt,name=Error" json:"Error,omitempty"`
	DeviceUID                      *string `protobuf:"bytes,4,opt,name=DeviceUID" json:"DeviceUID,omitempty"`
	DeviceEndpointID               *string `protobuf:"bytes,5,opt,name=DeviceEndpointID" json:"DeviceEndpointID,omitempty"`
	HubTimeNs                      *int64  `protobuf:"varint,6,opt,name=HubTimeNs" json:"HubTimeNs,omitempty"`
	HubEndpointID                  *string `protobuf:"bytes,7,opt,name=HubEndpointID" json:"HubEndpointID,omitempty"`
	HubSessionTicket               *string `protobuf:"bytes,8,opt,name=HubSessionTicket" json:"HubSessionTicket,omitempty"`
	HubSessionHandler              *string `protobuf:"bytes,9,opt,name=HubSessionHandler" json:"HubSessionHandler,omitempty"`
	HubSessionTicketExpiresTimeSec *int64  `protobuf:"varint,10,opt,name=HubSessionTicketExpiresTimeSec" json:"HubSessionTicketExpiresTimeSec,omitempty"`
	NotefileID                     *string `protobuf:"bytes,11,opt,name=NotefileID" json:"NotefileID,omitempty"`
	NotefileIDs                    *string `protobuf:"bytes,12,opt,name=NotefileIDs" json:"NotefileIDs,omitempty"`
	Since                          *int64  `protobuf:"varint,13,opt,name=Since" json:"Since,omitempty"`
	Until                          *int64  `protobuf:"varint,14,opt,name=Until" json:"Until,omitempty"`
	MaxChanges                     *int64  `protobuf:"varint,15,opt,name=MaxChanges" json:"MaxChanges,omitempty"`
	DeviceSN                       *string `protobuf:"bytes,16,opt,name=DeviceSN" json:"DeviceSN,omitempty"`
	NoteID                         *string `protobuf:"bytes,17,opt,name=NoteID" json:"NoteID,omitempty"`
	SessionIDPrev                  *int64  `protobuf:"varint,18,opt,name=SessionIDPrev" json:"SessionIDPrev,omitempty"`
	SessionIDNext                  *int64  `protobuf:"varint,19,opt,name=SessionIDNext" json:"SessionIDNext,omitempty"`
	SessionIDMismatch              *bool   `protobuf:"varint,20,opt,name=SessionIDMismatch" json:"SessionIDMismatch,omitempty"`
	Bytes1                         *int64  `protobuf:"varint,21,opt,name=Bytes1" json:"Bytes1,omitempty"`
	Bytes2                         *int64  `protobuf:"varint,22,opt,name=Bytes2" json:"Bytes2,omitempty"`
	Bytes3                         *int64  `protobuf:"varint,23,opt,name=Bytes3" json:"Bytes3,omitempty"`
	Bytes4                         *int64  `protobuf:"varint,24,opt,name=Bytes4" json:"Bytes4,omitempty"`
	ProductUID                     *string `protobuf:"bytes,25,opt,name=ProductUID" json:"ProductUID,omitempty"`
	UsageProvisioned               *int64  `protobuf:"varint,26,opt,name=UsageProvisioned" json:"UsageProvisioned,omitempty"`
	UsageRcvdBytes                 *uint32 `protobuf:"varint,27,opt,name=UsageRcvdBytes" json:"UsageRcvdBytes,omitempty"`
	UsageSentBytes                 *uint32 `protobuf:"varint,28,opt,name=UsageSentBytes" json:"UsageSentBytes,omitempty"`
	UsageTCPSessions               *uint32 `protobuf:"varint,29,opt,name=UsageTCPSessions" json:"UsageTCPSessions,omitempty"`
	UsageTLSSessions               *uint32 `protobuf:"varint,30,opt,name=UsageTLSSessions" json:"UsageTLSSessions,omitempty"`
	UsageRcvdNotes                 *uint32 `protobuf:"varint,31,opt,name=UsageRcvdNotes" json:"UsageRcvdNotes,omitempty"`
	UsageSentNotes                 *uint32 `protobuf:"varint,32,opt,name=UsageSentNotes" json:"UsageSentNotes,omitempty"`
	CellID                         *string `protobuf:"bytes,33,opt,name=CellID" json:"CellID,omitempty"`
	NotificationSession            *bool   `protobuf:"varint,34,opt,name=NotificationSession" json:"NotificationSession,omitempty"`
	Voltage100                     *int32  `protobuf:"varint,35,opt,name=Voltage100" json:"Voltage100,omitempty"`
	Temp100                        *int32  `protobuf:"varint,36,opt,name=Temp100" json:"Temp100,omitempty"`
	ContinuousSession              *bool   `protobuf:"varint,37,opt,name=ContinuousSession" json:"ContinuousSession,omitempty"`
	MotionSecs                     *int64  `protobuf:"varint,38,opt,name=MotionSecs" json:"MotionSecs,omitempty"`
	MotionOrientation              *string `protobuf:"bytes,39,opt,name=MotionOrientation" json:"MotionOrientation,omitempty"`
	SessionTrigger                 *string `protobuf:"bytes,40,opt,name=SessionTrigger" json:"SessionTrigger,omitempty"`
	Voltage1000                    *int32  `protobuf:"varint,41,opt,name=Voltage1000" json:"Voltage1000,omitempty"`
	Temp1000                       *int32  `protobuf:"varint,42,opt,name=Temp1000" json:"Temp1000,omitempty"`
	HubSessionFactoryResetID       *string `protobuf:"bytes,43,opt,name=HubSessionFactoryResetID" json:"HubSessionFactoryResetID,omitempty"`
	HighPowerSecsTotal             *uint32 `protobuf:"varint,44,opt,name=HighPowerSecsTotal" json:"HighPowerSecsTotal,omitempty"`
	HighPowerSecsData              *uint32 `protobuf:"varint,45,opt,name=HighPowerSecsData" json:"HighPowerSecsData,omitempty"`
	HighPowerSecsGPS               *uint32 `protobuf:"varint,46,opt,name=HighPowerSecsGPS" json:"HighPowerSecsGPS,omitempty"`
	HighPowerCyclesTotal           *uint32 `protobuf:"varint,47,opt,name=HighPowerCyclesTotal" json:"HighPowerCyclesTotal,omitempty"`
	HighPowerCyclesData            *uint32 `protobuf:"varint,48,opt,name=HighPowerCyclesData" json:"HighPowerCyclesData,omitempty"`
	HighPowerCyclesGPS             *uint32 `protobuf:"varint,49,opt,name=HighPowerCyclesGPS" json:"HighPowerCyclesGPS,omitempty"`
	DeviceSKU                      *string `protobuf:"bytes,50,opt,name=DeviceSKU" json:"DeviceSKU,omitempty"`
	DeviceFirmware                 *int64  `protobuf:"varint,51,opt,name=DeviceFirmware" json:"DeviceFirmware,omitempty"`
	DevicePIN                      *string `protobuf:"bytes,52,opt,name=DevicePIN" json:"DevicePIN,omitempty"`
	DeviceOrderingCode             *string `protobuf:"bytes,53,opt,name=DeviceOrderingCode" json:"DeviceOrderingCode,omitempty"`
	UsageRcvdBytesSecondary        *uint32 `protobuf:"varint,54,opt,name=UsageRcvdBytesSecondary" json:"UsageRcvdBytesSecondary,omitempty"`
	UsageSentBytesSecondary        *uint32 `protobuf:"varint,55,opt,name=UsageSentBytesSecondary" json:"UsageSentBytesSecondary,omitempty"`
	SuppressResponse               *bool   `protobuf:"varint,56,opt,name=SuppressResponse" json:"SuppressResponse,omitempty"`
	Where                          *string `protobuf:"bytes,57,opt,name=Where" json:"Where,omitempty"`
	WhereWhen                      *int64  `protobuf:"varint,58,opt,name=WhereWhen" json:"WhereWhen,omitempty"`
}

func (x *NotehubPB) Reset() {
	*x = NotehubPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notehub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotehubPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotehubPB) ProtoMessage() {}

func (x *NotehubPB) ProtoReflect() protoreflect.Message {
	mi := &file_notehub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotehubPB.ProtoReflect.Descriptor instead.
func (*NotehubPB) Descriptor() ([]byte, []int) {
	return file_notehub_proto_rawDescGZIP(), []int{0}
}

func (x *NotehubPB) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *NotehubPB) GetMessageType() string {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return ""
}

func (x *NotehubPB) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *NotehubPB) GetDeviceUID() string {
	if x != nil && x.DeviceUID != nil {
		return *x.DeviceUID
	}
	return ""
}

func (x *NotehubPB) GetDeviceEndpointID() string {
	if x != nil && x.DeviceEndpointID != nil {
		return *x.DeviceEndpointID
	}
	return ""
}

func (x *NotehubPB) GetHubTimeNs() int64 {
	if x != nil && x.HubTimeNs != nil {
		return *x.HubTimeNs
	}
	return 0
}

func (x *NotehubPB) GetHubEndpointID() string {
	if x != nil && x.HubEndpointID != nil {
		return *x.HubEndpointID
	}
	return ""
}

func (x *NotehubPB) GetHubSessionTicket() string {
	if x != nil && x.HubSessionTicket != nil {
		return *x.HubSessionTicket
	}
	return ""
}

func (x *NotehubPB) GetHubSessionHandler() string {
	if x != nil && x.HubSessionHandler != nil {
		return *x.HubSessionHandler
	}
	return ""
}

func (x *NotehubPB) GetHubSessionTicketExpiresTimeSec() int64 {
	if x != nil && x.HubSessionTicketExpiresTimeSec != nil {
		return *x.HubSessionTicketExpiresTimeSec
	}
	return 0
}

func (x *NotehubPB) GetNotefileID() string {
	if x != nil && x.NotefileID != nil {
		return *x.NotefileID
	}
	return ""
}

func (x *NotehubPB) GetNotefileIDs() string {
	if x != nil && x.NotefileIDs != nil {
		return *x.NotefileIDs
	}
	return ""
}

func (x *NotehubPB) GetSince() int64 {
	if x != nil && x.Since != nil {
		return *x.Since
	}
	return 0
}

func (x *NotehubPB) GetUntil() int64 {
	if x != nil && x.Until != nil {
		return *x.Until
	}
	return 0
}

func (x *NotehubPB) GetMaxChanges() int64 {
	if x != nil && x.MaxChanges != nil {
		return *x.MaxChanges
	}
	return 0
}

func (x *NotehubPB) GetDeviceSN() string {
	if x != nil && x.DeviceSN != nil {
		return *x.DeviceSN
	}
	return ""
}

func (x *NotehubPB) GetNoteID() string {
	if x != nil && x.NoteID != nil {
		return *x.NoteID
	}
	return ""
}

func (x *NotehubPB) GetSessionIDPrev() int64 {
	if x != nil && x.SessionIDPrev != nil {
		return *x.SessionIDPrev
	}
	return 0
}

func (x *NotehubPB) GetSessionIDNext() int64 {
	if x != nil && x.SessionIDNext != nil {
		return *x.SessionIDNext
	}
	return 0
}

func (x *NotehubPB) GetSessionIDMismatch() bool {
	if x != nil && x.SessionIDMismatch != nil {
		return *x.SessionIDMismatch
	}
	return false
}

func (x *NotehubPB) GetBytes1() int64 {
	if x != nil && x.Bytes1 != nil {
		return *x.Bytes1
	}
	return 0
}

func (x *NotehubPB) GetBytes2() int64 {
	if x != nil && x.Bytes2 != nil {
		return *x.Bytes2
	}
	return 0
}

func (x *NotehubPB) GetBytes3() int64 {
	if x != nil && x.Bytes3 != nil {
		return *x.Bytes3
	}
	return 0
}

func (x *NotehubPB) GetBytes4() int64 {
	if x != nil && x.Bytes4 != nil {
		return *x.Bytes4
	}
	return 0
}

func (x *NotehubPB) GetProductUID() string {
	if x != nil && x.ProductUID != nil {
		return *x.ProductUID
	}
	return ""
}

func (x *NotehubPB) GetUsageProvisioned() int64 {
	if x != nil && x.UsageProvisioned != nil {
		return *x.UsageProvisioned
	}
	return 0
}

func (x *NotehubPB) GetUsageRcvdBytes() uint32 {
	if x != nil && x.UsageRcvdBytes != nil {
		return *x.UsageRcvdBytes
	}
	return 0
}

func (x *NotehubPB) GetUsageSentBytes() uint32 {
	if x != nil && x.UsageSentBytes != nil {
		return *x.UsageSentBytes
	}
	return 0
}

func (x *NotehubPB) GetUsageTCPSessions() uint32 {
	if x != nil && x.UsageTCPSessions != nil {
		return *x.UsageTCPSessions
	}
	return 0
}

func (x *NotehubPB) GetUsageTLSSessions() uint32 {
	if x != nil && x.UsageTLSSessions != nil {
		return *x.UsageTLSSessions
	}
	return 0
}

func (x *NotehubPB) GetUsageRcvdNotes() uint32 {
	if x != nil && x.UsageRcvdNotes != nil {
		return *x.UsageRcvdNotes
	}
	return 0
}

func (x *NotehubPB) GetUsageSentNotes() uint32 {
	if x != nil && x.UsageSentNotes != nil {
		return *x.UsageSentNotes
	}
	return 0
}

func (x *NotehubPB) GetCellID() string {
	if x != nil && x.CellID != nil {
		return *x.CellID
	}
	return ""
}

func (x *NotehubPB) GetNotificationSession() bool {
	if x != nil && x.NotificationSession != nil {
		return *x.NotificationSession
	}
	return false
}

func (x *NotehubPB) GetVoltage100() int32 {
	if x != nil && x.Voltage100 != nil {
		return *x.Voltage100
	}
	return 0
}

func (x *NotehubPB) GetTemp100() int32 {
	if x != nil && x.Temp100 != nil {
		return *x.Temp100
	}
	return 0
}

func (x *NotehubPB) GetContinuousSession() bool {
	if x != nil && x.ContinuousSession != nil {
		return *x.ContinuousSession
	}
	return false
}

func (x *NotehubPB) GetMotionSecs() int64 {
	if x != nil && x.MotionSecs != nil {
		return *x.MotionSecs
	}
	return 0
}

func (x *NotehubPB) GetMotionOrientation() string {
	if x != nil && x.MotionOrientation != nil {
		return *x.MotionOrientation
	}
	return ""
}

func (x *NotehubPB) GetSessionTrigger() string {
	if x != nil && x.SessionTrigger != nil {
		return *x.SessionTrigger
	}
	return ""
}

func (x *NotehubPB) GetVoltage1000() int32 {
	if x != nil && x.Voltage1000 != nil {
		return *x.Voltage1000
	}
	return 0
}

func (x *NotehubPB) GetTemp1000() int32 {
	if x != nil && x.Temp1000 != nil {
		return *x.Temp1000
	}
	return 0
}

func (x *NotehubPB) GetHubSessionFactoryResetID() string {
	if x != nil && x.HubSessionFactoryResetID != nil {
		return *x.HubSessionFactoryResetID
	}
	return ""
}

func (x *NotehubPB) GetHighPowerSecsTotal() uint32 {
	if x != nil && x.HighPowerSecsTotal != nil {
		return *x.HighPowerSecsTotal
	}
	return 0
}

func (x *NotehubPB) GetHighPowerSecsData() uint32 {
	if x != nil && x.HighPowerSecsData != nil {
		return *x.HighPowerSecsData
	}
	return 0
}

func (x *NotehubPB) GetHighPowerSecsGPS() uint32 {
	if x != nil && x.HighPowerSecsGPS != nil {
		return *x.HighPowerSecsGPS
	}
	return 0
}

func (x *NotehubPB) GetHighPowerCyclesTotal() uint32 {
	if x != nil && x.HighPowerCyclesTotal != nil {
		return *x.HighPowerCyclesTotal
	}
	return 0
}

func (x *NotehubPB) GetHighPowerCyclesData() uint32 {
	if x != nil && x.HighPowerCyclesData != nil {
		return *x.HighPowerCyclesData
	}
	return 0
}

func (x *NotehubPB) GetHighPowerCyclesGPS() uint32 {
	if x != nil && x.HighPowerCyclesGPS != nil {
		return *x.HighPowerCyclesGPS
	}
	return 0
}

func (x *NotehubPB) GetDeviceSKU() string {
	if x != nil && x.DeviceSKU != nil {
		return *x.DeviceSKU
	}
	return ""
}

func (x *NotehubPB) GetDeviceFirmware() int64 {
	if x != nil && x.DeviceFirmware != nil {
		return *x.DeviceFirmware
	}
	return 0
}

func (x *NotehubPB) GetDevicePIN() string {
	if x != nil && x.DevicePIN != nil {
		return *x.DevicePIN
	}
	return ""
}

func (x *NotehubPB) GetDeviceOrderingCode() string {
	if x != nil && x.DeviceOrderingCode != nil {
		return *x.DeviceOrderingCode
	}
	return ""
}

func (x *NotehubPB) GetUsageRcvdBytesSecondary() uint32 {
	if x != nil && x.UsageRcvdBytesSecondary != nil {
		return *x.UsageRcvdBytesSecondary
	}
	return 0
}

func (x *NotehubPB) GetUsageSentBytesSecondary() uint32 {
	if x != nil && x.UsageSentBytesSecondary != nil {
		return *x.UsageSentBytesSecondary
	}
	return 0
}

func (x *NotehubPB) GetSuppressResponse() bool {
	if x != nil && x.SuppressResponse != nil {
		return *x.SuppressResponse
	}
	return false
}

func (x *NotehubPB) GetWhere() string {
	if x != nil && x.Where != nil {
		return *x.Where
	}
	return ""
}

func (x *NotehubPB) GetWhereWhen() int64 {
	if x != nil && x.WhereWhen != nil {
		return *x.WhereWhen
	}
	return 0
}

var File_notehub_proto protoreflect.FileDescriptor

var file_notehub_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6e, 0x6f, 0x74, 0x65, 0x6c, 0x69, 0x62, 0x22, 0x97, 0x11, 0x0a, 0x09, 0x4e, 0x6f, 0x74,
	0x65, 0x68, 0x75, 0x62, 0x50, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x75, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x48, 0x75, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x48, 0x75, 0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x48, 0x75, 0x62, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x75, 0x62, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x48, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x48, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x48,
	0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x1e, 0x48, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x48, 0x75, 0x62, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x65,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4e, 0x6f,
	0x74, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x65,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e,
	0x6f, 0x74, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x4e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x4e, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x4e, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x50, 0x72, 0x65, 0x76, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x50, 0x72, 0x65, 0x76,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x4e, 0x65, 0x78,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x4d, 0x69, 0x73, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x79, 0x74, 0x65, 0x73, 0x31, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x42, 0x79, 0x74, 0x65, 0x73, 0x31, 0x12, 0x16, 0x0a, 0x06,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x12, 0x16, 0x0a, 0x06,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x63, 0x76, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x63, 0x76, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x43, 0x50, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x43, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x4c, 0x53, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x4c, 0x53,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x63, 0x76, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x63, 0x76, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x65, 0x6c, 0x6c,
	0x49, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44,
	0x12, 0x30, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x31, 0x30, 0x30,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x31,
	0x30, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x65, 0x6d, 0x70, 0x31, 0x30, 0x30, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x65, 0x6d, 0x70, 0x31, 0x30, 0x30, 0x12, 0x2c, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x6f, 0x75, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x31, 0x30, 0x30, 0x30, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x31, 0x30,
	0x30, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x31, 0x30, 0x30, 0x30, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x31, 0x30, 0x30, 0x30, 0x12, 0x3a,
	0x0a, 0x18, 0x48, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x48, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x48, 0x69,
	0x67, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x63, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x48, 0x69, 0x67, 0x68, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x48, 0x69,
	0x67, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x48, 0x69, 0x67, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x69, 0x67, 0x68,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x63, 0x73, 0x47, 0x50, 0x53, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x48, 0x69, 0x67, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x73, 0x47, 0x50, 0x53, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x69, 0x67, 0x68, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x48, 0x69, 0x67, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x69, 0x67, 0x68,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x48, 0x69, 0x67, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x48, 0x69,
	0x67, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x47, 0x50, 0x53,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x48, 0x69, 0x67, 0x68, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x47, 0x50, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x4b, 0x55, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x4b, 0x55, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x49, 0x4e, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x49, 0x4e, 0x12, 0x2e,
	0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38,
	0x0a, 0x17, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x63, 0x76, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x63, 0x76, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x53, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x57, 0x68, 0x65, 0x72, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x57,
	0x68, 0x65, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x68, 0x65, 0x72, 0x65, 0x57, 0x68, 0x65,
	0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x57, 0x68, 0x65, 0x72, 0x65, 0x57, 0x68,
	0x65, 0x6e,
}

var (
	file_notehub_proto_rawDescOnce sync.Once
	file_notehub_proto_rawDescData = file_notehub_proto_rawDesc
)

func file_notehub_proto_rawDescGZIP() []byte {
	file_notehub_proto_rawDescOnce.Do(func() {
		file_notehub_proto_rawDescData = protoimpl.X.CompressGZIP(file_notehub_proto_rawDescData)
	})
	return file_notehub_proto_rawDescData
}

var file_notehub_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_notehub_proto_goTypes = []interface{}{
	(*NotehubPB)(nil), // 0: notelib.NotehubPB
}
var file_notehub_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_notehub_proto_init() }
func file_notehub_proto_init() {
	if File_notehub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_notehub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotehubPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notehub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_notehub_proto_goTypes,
		DependencyIndexes: file_notehub_proto_depIdxs,
		MessageInfos:      file_notehub_proto_msgTypes,
	}.Build()
	File_notehub_proto = out.File
	file_notehub_proto_rawDesc = nil
	file_notehub_proto_goTypes = nil
	file_notehub_proto_depIdxs = nil
}
