/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.5 at Thu Nov 19 12:25:00 2020. */

#ifndef PB_NOTEHUB_PB_H_INCLUDED
#define PB_NOTEHUB_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _notelib_NotehubPB {
    bool has_Version;
    int64_t Version;
    bool has_MessageType;
    char MessageType[25];
    bool has_Error;
    char Error[250];
    bool has_DeviceUID;
    char DeviceUID[100];
    bool has_DeviceEndpointID;
    char DeviceEndpointID[100];
    bool has_HubTimeNs;
    int64_t HubTimeNs;
    bool has_HubEndpointID;
    char HubEndpointID[100];
    bool has_HubSessionTicket;
    char HubSessionTicket[128];
    bool has_HubSessionHandler;
    char HubSessionHandler[250];
    bool has_HubSessionTicketExpiresTimeSec;
    int64_t HubSessionTicketExpiresTimeSec;
    bool has_NotefileID;
    char NotefileID[250];
    bool has_NotefileIDs;
    char NotefileIDs[250];
    bool has_Since;
    int64_t Since;
    bool has_Until;
    int64_t Until;
    bool has_MaxChanges;
    int64_t MaxChanges;
    bool has_DeviceSN;
    char DeviceSN[250];
    bool has_NoteID;
    char NoteID[100];
    bool has_SessionIDPrev;
    int64_t SessionIDPrev;
    bool has_SessionIDNext;
    int64_t SessionIDNext;
    bool has_SessionIDMismatch;
    bool SessionIDMismatch;
    bool has_Bytes1;
    int64_t Bytes1;
    bool has_Bytes2;
    int64_t Bytes2;
    bool has_Bytes3;
    int64_t Bytes3;
    bool has_Bytes4;
    int64_t Bytes4;
    bool has_ProductUID;
    char ProductUID[100];
    bool has_UsageProvisioned;
    int64_t UsageProvisioned;
    bool has_UsageRcvdBytes;
    uint32_t UsageRcvdBytes;
    bool has_UsageSentBytes;
    uint32_t UsageSentBytes;
    bool has_UsageTCPSessions;
    uint32_t UsageTCPSessions;
    bool has_UsageTLSSessions;
    uint32_t UsageTLSSessions;
    bool has_UsageRcvdNotes;
    uint32_t UsageRcvdNotes;
    bool has_UsageSentNotes;
    uint32_t UsageSentNotes;
    bool has_CellID;
    char CellID[100];
    bool has_NotificationSession;
    bool NotificationSession;
    bool has_Voltage100;
    int32_t Voltage100;
    bool has_Temp100;
    int32_t Temp100;
    bool has_ContinuousSession;
    bool ContinuousSession;
    bool has_MotionSecs;
    int64_t MotionSecs;
    bool has_MotionOrientation;
    char MotionOrientation[100];
    bool has_SessionTrigger;
    char SessionTrigger[250];
/* @@protoc_insertion_point(struct:notelib_NotehubPB) */
} notelib_NotehubPB;

/* Default values for struct fields */

/* Initializer values for message structs */
#define notelib_NotehubPB_init_default           {false, 0, false, "", false, "", false, "", false, "", false, 0, false, "", false, "", false, "", false, 0, false, "", false, "", false, 0, false, 0, false, 0, false, "", false, "", false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, ""}
#define notelib_NotehubPB_init_zero              {false, 0, false, "", false, "", false, "", false, "", false, 0, false, "", false, "", false, "", false, 0, false, "", false, "", false, 0, false, 0, false, 0, false, "", false, "", false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, ""}

/* Field tags (for use in manual encoding/decoding) */
#define notelib_NotehubPB_Version_tag            1
#define notelib_NotehubPB_MessageType_tag        2
#define notelib_NotehubPB_Error_tag              3
#define notelib_NotehubPB_DeviceUID_tag          4
#define notelib_NotehubPB_DeviceEndpointID_tag   5
#define notelib_NotehubPB_HubTimeNs_tag          6
#define notelib_NotehubPB_HubEndpointID_tag      7
#define notelib_NotehubPB_HubSessionTicket_tag   8
#define notelib_NotehubPB_HubSessionHandler_tag  9
#define notelib_NotehubPB_HubSessionTicketExpiresTimeSec_tag 10
#define notelib_NotehubPB_NotefileID_tag         11
#define notelib_NotehubPB_NotefileIDs_tag        12
#define notelib_NotehubPB_Since_tag              13
#define notelib_NotehubPB_Until_tag              14
#define notelib_NotehubPB_MaxChanges_tag         15
#define notelib_NotehubPB_DeviceSN_tag           16
#define notelib_NotehubPB_NoteID_tag             17
#define notelib_NotehubPB_SessionIDPrev_tag      18
#define notelib_NotehubPB_SessionIDNext_tag      19
#define notelib_NotehubPB_SessionIDMismatch_tag  20
#define notelib_NotehubPB_Bytes1_tag             21
#define notelib_NotehubPB_Bytes2_tag             22
#define notelib_NotehubPB_Bytes3_tag             23
#define notelib_NotehubPB_Bytes4_tag             24
#define notelib_NotehubPB_ProductUID_tag         25
#define notelib_NotehubPB_UsageProvisioned_tag   26
#define notelib_NotehubPB_UsageRcvdBytes_tag     27
#define notelib_NotehubPB_UsageSentBytes_tag     28
#define notelib_NotehubPB_UsageTCPSessions_tag   29
#define notelib_NotehubPB_UsageTLSSessions_tag   30
#define notelib_NotehubPB_UsageRcvdNotes_tag     31
#define notelib_NotehubPB_UsageSentNotes_tag     32
#define notelib_NotehubPB_CellID_tag             33
#define notelib_NotehubPB_NotificationSession_tag 34
#define notelib_NotehubPB_Voltage100_tag         35
#define notelib_NotehubPB_Temp100_tag            36
#define notelib_NotehubPB_ContinuousSession_tag  37
#define notelib_NotehubPB_MotionSecs_tag         38
#define notelib_NotehubPB_MotionOrientation_tag  39
#define notelib_NotehubPB_SessionTrigger_tag     40

/* Struct field encoding specification for nanopb */
extern const pb_field_t notelib_NotehubPB_fields[41];

/* Maximum encoded size of messages (where known) */
#define notelib_NotehubPB_size                   2633

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define NOTEHUB_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
